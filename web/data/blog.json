{
    "1": {
        "id": 1,
        "title": "十大相见恨晚的Chrome插件",
        "imgsrc": "/images/list-1.png",
        "desc": " <h4>（一）WEB前端助手（<code>FeHelper</code>)</h4><p>FeHelper简直就是前端开发人员的神器，它是由国人开发的一款前端工具集合的小插件，插件功能齐全，基本上涵盖了前端从业者经常会使用到的<strong>基础功能</strong>，使用起来也很顺手。<p>FE支持按需安装，也就是说，上面的这些功能， 你需要什用到什么再安装就行， 下面就挑两个我工作中使用到的：</p><p><strong>json 格式化</strong></p> <p><strong>页面取色</strong></p> <p>我们在开发时需要对一些内容进行取色， 很多小伙伴都是打开chrome调试器再使用取色器进行取色。使用FeHelper的取色器更加方便</p> <p><strong>JS正则表达式验证</strong></p> <p>不仅可以生成常用的正则表达式, 也可可以校验表达式是否匹配, 在正则调试过程中可以起到较好地辅助作用</p><h4>（二）vue-devtools</h4><p>vue-devtools是一款基于chrome游览器的插件，用于调试vue应用,被称为“Vue 调试神奇” vue是数据驱动的, 利用这个插件，这样就能看到vue中每个组件的data、props、computed等多种属性和方法，为我们项目的开发与调试提供了很多的便利 。</p> <h4>（三）React Developer Tools</h4><p>如果你使用React进行开发，那必不可少的就是<code>React Developer Tools</code>, 它是Fecebook出品的，同样使用 <code>React Developer Tools</code> 进行调试时，可以查看应用程序的 React 组件分层结构，而不是更加神秘的浏览器 DOM 表示</p> <h4>（四）Postman</h4> <p>Postman 插件可以复用浏览器的Cookie，更加方便测试。不论你是做后端开发还是客户端开发，Postman都是测试HTTP接口的必备利器，支持集成测试；还可以将测试请求分组，然后批量执行。</p><h4>（五）Octotree</h4><p>在GitHub边侧栏上显示代码树。非常适合查看项目源代码，无需将代码库clone到编辑器就可以如同在编辑器中操作一样， 可以直接搜索文件跳转。</p> <h4>（六）Lighthouse 前端性能优化测试工具</h4><p>在前端开发中，对于自己开发的app或者web page性能的好坏，一直是让前端开发很在意的话题。我们需要专业的网站测试工具，让我们知道自己的网页还有哪些需要更为优化的方面，我是使用过的一款工具：<strong>Lighthouse</strong>&nbsp;，感觉还不错，记录下来，也顺便分享给用得着的伙伴。</p><h4>（七）Clear Cache</h4> <p>clear cache通过单击一个按钮清除缓存和浏览数据。使用此扩展快速清除缓存，无需任何确认对话框，弹出窗口或其他烦恼。<strong>点击图标即可清除缓存、cookie等，开发必备！</strong>可以根据需要清除的数据定制ClearCache，这些数据包括应用缓存，Cookie，下载，文件系统，表单数据，历史记录，索引数据库，本地存储，插件数据，密码和WebSQL等。</p>  <h4>（八） Vimium</h4>  <p>Vimium 则继承了 Vim 中的常用键位，让你在使用 Chrome 的过程中，无论是浏览网页、切换标签或是其它任何操作，全都可以只通过键盘完成。想像一下，你再也不需要移动鼠标去打开一个链接，手指不用离开键盘，一切都是这么流畅。</p><h4>（九） Save All Resources</h4><p>当我们在网页上看到炫酷的动画效果，一个很自然的想法就是F12， 然后下载资源，但是在chrome开发者工具中Source是找到当前页面所使用的资源，而我们希望可以直接一键下载所有网页资源，并且可以保持目录结构。</p> <p>一键下载网页资源(Save All Resources)，可以完美的满足我们的需求</p>  <h4>（十）Wappalyzer</h4> <p>展示你访问的网页由什么技术栈所构建，准确率还是不错的，方便分析其他网站</p>"
    },
    "2": {
        "id": 2,
        "title": "VSCode插件开发梳理",
        "imgsrc": "/images/list-2.png",
        "desc": "<h2>搭建环境</h2><p>首先Nodejs和VSCode需要提前安装好，这里对这块的安装不再赘述。接下来安装yo 这是vscode团队为插件开发提供的工具</p><p>安装成功后，通过yo code生成插件开发项目，这里官方推荐使用typescript，当然我们更熟悉javascript，其余的根据情况默认即可</p><p>一路生成后，通过VSCode打开（File->Open Folder）刚生成的插件项目,在这一堆文件中，我们只关心两个重点，extension.js 是插件的入口文件，package.json包含插件的配置信息准备完成后，为了先验证下插件项目正常OK，在VSCode中F5运行（或Debug->start）如果你可以看到VSCode又启动了一个窗口运行插件项目,shift+ctrl+p 输入Hello World如果在右下角能看到Hello World的提示信息就OK 了</p>"
    },
    "3": {
        "id": 3,
        "title": "Python结合Window计划任务监测邮件",
        "imgsrc": "/images/list-3.png",
        "desc": "<blockquote>说起自动化绝对算是茶余饭后最有显B格的谈资，毕竟解放双手是从老祖先那里就流传下来的基因，都2020了，你每天上班还要登录各个邮箱账号查收邮件？快来解锁本章内容</blockquote><h3>整体思路</h3><p>通过Python zemail库实现邮件读取</p><p>将最新一封邮件ID进行保存，第二次执行时比对邮件ID，判断是否是新邮件</p><p>通过Python pymsgbox库实现window弹窗提示</p><p>配置Window计划任务，每1分钟执行一次</p><h3 >步骤一：邮件读取</h3><p>读取邮件通过Python zemail库进行，使用前通过 pip install zemail进行安装</p><p>在配置邮件server时，注意邮箱要开启POP3/SMTP服务，QQ邮箱开启是在：设置-&gt;开启POP3/SMTP服务，同时设置授权码，server配置第二个是自动生成的授权码</p><h3>步骤二：新旧邮件比对</h3><p>想要提示用户有最新的邮件，就要把最后一封邮件的信息进行记录，在指定时间后，拿着两封邮件的信息进行比对，这里我们使用的邮件ID（注意ID并不唯一，如要确保一定的准确，可以用ID结合邮件标题等多方面信息）</p><p>记录邮件信息我这里放在了一个txt文件中，每次先读取再写入</p><h3>步骤三：实现window弹窗提示</h3><p>像这种操作早有前人已经替我们完成了，这种库有很多，这里采用的是pymsgbox,使用前注意通过pip install pymsgbox进行安装</p><h3>步骤四：配置Window计划任务</h3><p>前面都完成之后，执行python文件已经可以提示最新邮件了，现在遇到的问题就是如果自动化起来，总不能自己手动点吧</p><p>这里配置Window计划任务，首先创建一个新任务，起个名字autoemail</p><p>配置触发器，每1分钟执行一次，在操作这里，要执行的内容是什么呢，显然Window并不能直接执行python，这里创建一个.bat文件，在文件中执行Python文件，在计划任务这里指定.bat文件即可<br></p><h3>最后</h3><p>现在自己手动给邮箱发一封邮件之后，等待1分钟后，就可以看到pymsgbox的弹窗提示了，现在就可以去邮箱里面去查收邮件了，或者也可以直接把邮件内容一起显示出来，随意啦<br>"
    },
    "6": {
        "id": 6,
        "title": "Ansible 和 Celery 运维开发平台实战",
        "imgsrc": "/images/list-6.png",
        "desc": "这篇课程为大家提供一种管理服务器在 1000 台以内的自动化运维方案，主要实现自动化运维方案里的集中化管理的核心部分；可以为运维工作的同学提供一种解决日常工作中批量处理服务器维护性工作的方案，为从事自动化运维开发的同学提供一种自动化运维的实现思路。"
    }
}